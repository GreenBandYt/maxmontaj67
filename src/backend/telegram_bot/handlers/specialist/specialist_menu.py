from telegram import Update
from telegram.ext import ContextTypes
from .specialist_keyboards import specialist_keyboard

import logging
import pymysql
from bot_utils.bot_db_utils import db_connect
from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram_bot.bot_utils.messages.notifications import format_order_message  # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é



async def specialist_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
    """
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {update.effective_user.first_name}!\n"
        "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=specialist_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    )


async def handle_specialist_new_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏).
    """
    telegram_id = update.message.from_user.id
    logging.info(f"[SPECIALIST] {telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")

    with db_connect() as conn:
        cursor = conn.cursor(pymysql.cursors.DictCursor)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        cursor.execute("""
            SELECT * FROM pending_orders
            WHERE (status = 'new' OR status = 'notified')
              AND send_to_specialist = 1
        """)
        new_orders = cursor.fetchall()

        if not new_orders:
            await update.message.reply_text("üîî –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")
            return

        for order in new_orders:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
            message_text, reply_markup = format_order_message(order, is_repeat=False, role="3")
            if reply_markup:
                await update.message.reply_text(message_text, parse_mode="Markdown", reply_markup=reply_markup)
            else:
                await update.message.reply_text(message_text, parse_mode="Markdown")


async def handle_specialist_current_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.message.from_user.id
    logging.info(f"[SPECIALIST] {telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π.")

    with db_connect() as conn:
        cursor = conn.cursor(pymysql.cursors.DictCursor)

        # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π
        cursor.execute("""
            SELECT 
                o.id AS order_id, 
                o.customer_address, 
                c.phone AS customer_phone, 
                o.description, 
                o.montage_date, 
                o.deadline_at 
            FROM 
                orders o
            JOIN 
                customers c ON o.customer_id = c.id
            WHERE 
                o.installer_id = (SELECT id FROM users WHERE telegram_id = %s) AND 
                o.status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
        """, (telegram_id,))
        current_orders = cursor.fetchall()

        if not current_orders:
            await update.message.reply_text("üõ†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        for order in current_orders:
            message = f"""
üìã *–¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ ‚Ññ{order['order_id']}*
üè† *–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞:* {order['customer_address']}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:* {order['customer_phone']}
üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {order['description']}
üìÖ *–î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞:* {order['montage_date'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}
‚è∞ *–î–µ–¥–ª–∞–π–Ω:* {order['deadline_at']}
"""
            reply_markup = create_specialist_buttons(order["order_id"])
            await update.message.reply_text(message, parse_mode="Markdown", reply_markup=reply_markup)



async def handle_specialist_contact_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è".
    """
    await update.message.reply_text("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. (–ó–∞–≥–ª—É—à–∫–∞)")



async def handle_specialist_accept_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    order_id = int(query.data.split("_")[-1])
    telegram_id = query.from_user.id

    logging.info(f"[SPECIALIST] {telegram_id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ {order_id}")

    with db_connect() as conn:
        cursor = conn.cursor(pymysql.cursors.DictCursor)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        cursor.execute("SELECT status FROM orders WHERE id = %s", (order_id,))
        order = cursor.fetchone()

        if not order:
            logging.error(f"[SPECIALIST] –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!")
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —É–¥–∞–ª—ë–Ω.")
            return

        if order["status"] == "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è":
            logging.warning(f"[SPECIALIST] –ó–∞–∫–∞–∑ {order_id} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!")
            await query.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!", show_alert=True)
            await query.edit_message_text("‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return

        # –ù–∞—Ö–æ–¥–∏–º user_id –ø–æ telegram_id
        cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (telegram_id,))
        user = cursor.fetchone()

        if not user:
            logging.error(f"[SPECIALIST] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!")
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
            return

        user_id = user["id"]
        logging.info(f"[SPECIALIST] –ù–∞–π–¥–µ–Ω user_id {user_id} –¥–ª—è telegram_id {telegram_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        sql = "UPDATE orders SET installer_id = %s, status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' WHERE id = %s"
        logging.info(f"SQL QUERY: {sql} | DATA: ({user_id}, {order_id})")
        cursor.execute(sql, (user_id, order_id))
        conn.commit()
        logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ë–î")

        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ pending_orders
        cursor.execute("DELETE FROM pending_orders WHERE order_id = %s", (order_id,))
        conn.commit()
        logging.info(f"üóëÔ∏è –ó–∞–∫–∞–∑ {order_id} —É–¥–∞–ª—ë–Ω –∏–∑ pending_orders")

    await query.answer("‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É!", show_alert=True)
    await query.edit_message_reply_markup(None)
    await query.edit_message_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.")


async def handle_specialist_decline_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚ùå –ù–µ –ø—Ä–∏–Ω–∏–º–∞—é" (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç).
    """
    query = update.callback_query
    order_id = query.data.split("_")[-1]  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞

    logging.info(f"[SPECIALIST] {query.from_user.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞ {order_id}")

    await query.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞.", show_alert=True)
    await query.edit_message_reply_markup(None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

async def handle_specialist_montage_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç–æ–π –º–æ–Ω—Ç–∞–∂–∞ (specialist).
    """
    await update.message.reply_text("üìÖ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç–æ–π –º–æ–Ω—Ç–∞–∂–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


async def handle_specialist_complete_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (specialist).
    """
    await update.message.reply_text("‚úÖ –ú–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


from telegram import InlineKeyboardButton, InlineKeyboardMarkup

def create_specialist_buttons(order_id):
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
    """
    buttons = [
        [
            InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞", callback_data=f"specialist_set_montage_date_{order_id}"),
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", callback_data=f"specialist_complete_order_{order_id}")
        ]
    ]
    return InlineKeyboardMarkup(buttons)