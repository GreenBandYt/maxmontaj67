from functools import wraps
from telegram import Update
from telegram.ext import ContextTypes
from telegram_bot.bot_utils.bot_db_utils import db_connect
import logging
import inspect
import ast
from telegram_bot.dictionaries.states import INITIAL_STATES


def check_access(required_role=None, required_state=None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏.
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_role = context.user_data.get("role", "guest")
            user_state = context.user_data.get("state", "guest_idle")

            logging.info(
                f"[CHECK ACCESS] –§—É–Ω–∫—Ü–∏—è: {func.__name__} | –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_role}, "
                f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_state} | –¢—Ä–µ–±—É–µ–º–∞—è —Ä–æ–ª—å: {required_role}, "
                f"–¢—Ä–µ–±—É–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {required_state}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
            if required_role and required_role != "all" and user_role != required_role:
                logging.warning(
                    f"[ACCESS DENIED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é '{user_role}' –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å "
                    f"—Ñ—É–Ω–∫—Ü–∏—é '{func.__name__}', —Ç—Ä–µ–±—É—é—â—É—é —Ä–æ–ª—å '{required_role}'."
                )
                await update.message.reply_text(
                    f"‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.\n"
                    f"–í–∞—à–∞ —Ä–æ–ª—å: {user_role}\n"
                    f"–¢—Ä–µ–±—É–µ–º–∞—è —Ä–æ–ª—å: {required_role}."
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if required_state and user_state != required_state:
                logging.warning(
                    f"[ACCESS DENIED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º '{user_state}' –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å "
                    f"—Ñ—É–Ω–∫—Ü–∏—é '{func.__name__}', —Ç—Ä–µ–±—É—é—â—É—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ '{required_state}'."
                )
                await update.message.reply_text(
                    f"‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.\n"
                    f"–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_state}\n"
                    f"–¢—Ä–µ–±—É–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {required_state}."
                )
                return

            logging.info(
                f"[ACCESS GRANTED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é '{user_role}' –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º '{user_state}' "
                f"–ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏ '{func.__name__}'."
            )
            return await func(update, context, *args, **kwargs)
        return wrapper
    return decorator


async def sync_user_role_and_state(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ä–æ–ª—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    user_id = update.message.from_user.id

    try:
        with db_connect() as conn:
            cursor = conn.cursor()
            query = """
                SELECT r.name AS role, u.state AS state
                FROM users u
                JOIN roles r ON u.role = r.id
                WHERE u.telegram_id = %s
            """
            cursor.execute(query, (user_id,))
            result = cursor.fetchone()
            if not result:
                logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return False

            db_role = result[0]
            db_state = result[1]

            # –ï—Å–ª–∏ –ø–æ–ª–µ state –≤ –ë–î –ø—É—Å—Ç–æ–µ, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if db_state is None:
                db_state = INITIAL_STATES.get(db_role, "guest_idle")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –ë–î: {e}")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    current_role = context.user_data.get("role", "guest")
    current_state = context.user_data.get("state", "guest_idle")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    if current_role != db_role or current_state != db_state:
        context.user_data["role"] = db_role
        context.user_data["state"] = db_state
        logging.info(f"–†–æ–ª—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: —Ä–æ–ª—å={db_role}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ={db_state}")

    return True



def find_decorated_functions():
    """
    –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º @check_access –≤ –º–æ–¥—É–ª—è—Ö –≤–Ω—É—Ç—Ä–∏ telegram_bot.
    """
    decorated_functions = []

    print("üîé –ü–æ–∏—Å–∫ –∑–∞–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
    for module_name, module in list(sys.modules.items()):
        if module and module_name.startswith("telegram_bot"):
            for name, func in inspect.getmembers(module, inspect.isfunction):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ñ—É–Ω–∫—Ü–∏–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
                if hasattr(func, "__wrapped__"):
                    decorator = func.__wrapped__

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    required_role = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    required_state = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

                    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ __closure__
                    if hasattr(decorator, "__closure__") and decorator.__closure__:
                        closure_vars = [var.cell_contents for var in decorator.__closure__ if var.cell_contents]

                        for var in closure_vars:
                            if isinstance(var, str):
                                if var in INITIAL_STATES.keys():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ä–æ–ª—è–º
                                    required_role = var
                                elif "idle" in var or "active" in var or "busy" in var:
                                    required_state = var

                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ __closure__, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
                    if required_role == "–ù–µ —É–∫–∞–∑–∞–Ω–æ" or required_state == "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                        try:
                            source_code = inspect.getsource(func)
                            tree = ast.parse(source_code)
                            for node in ast.walk(tree):
                                if isinstance(node, ast.Call) and hasattr(node.func, 'id') and node.func.id == "check_access":
                                    for keyword in node.keywords:
                                        if keyword.arg == "required_role":
                                            required_role = keyword.value.s
                                        if keyword.arg == "required_state":
                                            required_state = keyword.value.s
                        except Exception as e:
                            logging.error(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫–æ–¥–∞ {func.__name__}: {e}")

                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {name} (–†–æ–ª—å: {required_role}, –°–æ—Å—Ç–æ—è–Ω–∏–µ: {required_state})")

                    decorated_functions.append({
                        "function_name": name,
                        "decorator": decorator.__name__,
                        "module": module_name,
                        "description": func.__doc__ or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                        "required_role": required_role,
                        "required_state": required_state
                    })

    print(f"üìå –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(decorated_functions)}")
    return decorated_functions
