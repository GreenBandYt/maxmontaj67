# src/backend/telegram_bot/bot_utils/access_control.py

from functools import wraps
from telegram import Update
from telegram.ext import ContextTypes
from telegram_bot.bot_utils.bot_db_utils import db_connect
import logging


from telegram_bot.bot_utils.db_utils import get_user_role, get_user_state


def check_access(required_role=None, required_state=None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_id = update.effective_user.id

            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try:
                user_role = await get_user_role(user_id)
                user_state = await get_user_state(user_id)
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
            if required_role and user_role != required_role:
                await update.message.reply_text(
                    f"‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.\n"
                    f"–í–∞—à–∞ —Ä–æ–ª—å: {user_role}, —Ç—Ä–µ–±—É–µ–º–∞—è —Ä–æ–ª—å: {required_role}."
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if required_state and user_state != required_state:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.\n"
                    f"–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_state}, —Ç—Ä–µ–±—É–µ–º–æ–µ: {required_state}."
                )
                return

            # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            return await func(update, context, *args, **kwargs)
        return wrapper
    return decorator


def check_state(required_state: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏.
    :param required_state: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_id = update.effective_user.id

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                user_state = await get_user_state(user_id)
                logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –¢–µ–∫—É—â–µ–µ: {user_state}, –¢—Ä–µ–±—É–µ–º–æ–µ: {required_state}")

                if not user_state:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç
                    reply_target = update.message or update.callback_query.message
                    await reply_target.reply_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–º—É
                if user_state != required_state:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç
                    reply_target = update.message or update.callback_query.message
                    await reply_target.reply_text(
                        f"‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.\n"
                        f"–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_state}\n"
                        f"–¢—Ä–µ–±—É–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {required_state}."
                    )
                    return

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç
                reply_target = update.message or update.callback_query.message
                if reply_target:
                    await reply_target.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                return

            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            return await func(update, context, *args, **kwargs)
        return wrapper
    return decorator






import inspect
import sys
from functools import wraps

def find_decorated_functions():
    """
    –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º @check_access –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    """
    decorated_functions = []

    print("üîé –ü–æ–∏—Å–∫ –∑–∞–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")

    for module_name, module in list(sys.modules.items()):
        if module and module_name.startswith("telegram_bot.handlers"):
            for name, func in inspect.getmembers(module, inspect.isfunction):
                if hasattr(func, "__wrapped__"):
                    decorator = func.__wrapped__

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    required_role = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    required_state = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

                    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ __closure__
                    if hasattr(decorator, "__closure__") and decorator.__closure__:
                        closure_vars = [var.cell_contents for var in decorator.__closure__ if var.cell_contents]

                        for var in closure_vars:
                            if isinstance(var, str):
                                if "guest" in var or "admin" in var or "executor" in var:
                                    required_role = var
                                if "idle" in var or "active" in var or "busy" in var:
                                    required_state = var

                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ __closure__, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
                    if required_role == "–ù–µ —É–∫–∞–∑–∞–Ω–æ" or required_state == "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                        try:
                            source_code = inspect.getsource(func)
                            tree = ast.parse(source_code)
                            for node in ast.walk(tree):
                                if isinstance(node, ast.Call) and hasattr(node.func, 'id') and node.func.id == "check_access":
                                    for keyword in node.keywords:
                                        if keyword.arg == "required_role":
                                            required_role = keyword.value.s  # –ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
                                        if keyword.arg == "required_state":
                                            required_state = keyword.value.s
                        except Exception as e:
                            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫–æ–¥–∞ {func.__name__}: {e}")

                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {func.__name__} (–†–æ–ª—å: {required_role}, –°–æ—Å—Ç–æ—è–Ω–∏–µ: {required_state})")

                    decorated_functions.append({
                        "function_name": func.__name__,
                        "decorator": decorator.__name__,
                        "module": module_name,
                        "description": func.__doc__ or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                        "required_role": required_role,
                        "required_state": required_state
                    })

    print(f"üìå –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(decorated_functions)}")
    return decorated_functions
