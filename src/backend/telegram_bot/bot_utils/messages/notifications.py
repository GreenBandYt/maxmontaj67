import os
import sys
import logging
import asyncio
import pymysql
import pytz

from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram_bot.bot_token import TELEGRAM_BOT_TOKEN

BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../..'))
if BASE_DIR not in sys.path:
    sys.path.insert(0, BASE_DIR)

from telegram_bot.bot_utils.bot_db_utils import db_connect


logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
bot = Bot(token=TELEGRAM_BOT_TOKEN)
MOSCOW_TZ = pytz.timezone("Europe/Moscow")


async def notification_worker():
    while True:
        now = datetime.now(MOSCOW_TZ)
        work_hours_start, work_hours_end, repeat_interval, repeat_notified_interval, deadline_warning_days = get_notification_settings()
        adaptive_interval = repeat_interval

        if now.weekday() in [5, 6]:
            adaptive_interval = 8 * 60
            logging.info("üö´ –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å! –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 8 —á–∞—Å–æ–≤.")

        if not (work_hours_start <= now.time() < work_hours_end):
            adaptive_interval = 30
            logging.info("‚è≥ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 30 –º–∏–Ω—É—Ç.")

        await process_new_orders()
        await process_notified_orders()
        await process_deadline_orders(deadline_warning_days)

        logging.info(f"‚è± –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏: {adaptive_interval} –º–∏–Ω—É—Ç")
        await asyncio.sleep(adaptive_interval * 60)


def get_notification_settings():
    with db_connect() as conn:
        cursor = conn.cursor(pymysql.cursors.DictCursor)
        cursor.execute("SELECT * FROM notification_settings WHERE id = 1")
        settings = cursor.fetchone()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ timedelta –≤ datetime.time
        work_hours_start = settings["work_hours_start"]
        if isinstance(work_hours_start, timedelta):
            work_hours_start = (datetime.min + work_hours_start).time()

        work_hours_end = settings["work_hours_end"]
        if isinstance(work_hours_end, timedelta):
            work_hours_end = (datetime.min + work_hours_end).time()

        return (
            work_hours_start,
            work_hours_end,
            settings["repeat_interval"],
            settings["repeat_notified_interval"],
            settings["deadline_warning_days"]
        )


async def process_new_orders():
    try:
        with db_connect() as conn:
            cursor = conn.cursor(pymysql.cursors.DictCursor)
            cursor.execute("SELECT * FROM pending_orders WHERE status='new'")
            new_orders = cursor.fetchall()

            for order in new_orders:
                success = await notify_users(order, cursor)
                cursor.execute("UPDATE pending_orders SET last_notified_at=NOW(), status='notified' WHERE id=%s",
                               (order["id"],))
                conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")


async def process_notified_orders():
    try:
        now = datetime.now(MOSCOW_TZ)
        _, _, _, repeat_notified_interval, _ = get_notification_settings()
        check_time = now - timedelta(minutes=repeat_notified_interval, seconds=5)

        with db_connect() as conn:
            cursor = conn.cursor(pymysql.cursors.DictCursor)
            cursor.execute("SELECT * FROM pending_orders WHERE status='notified' AND last_notified_at <= %s",
                           (check_time,))
            notified_orders = cursor.fetchall()

            for order in notified_orders:
                success = await notify_users(order, cursor, is_repeat=True)
                if success:
                    cursor.execute("UPDATE pending_orders SET last_notified_at=NOW() WHERE id=%s", (order["id"],))
                    conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


async def process_deadline_orders(deadline_warning_days):
    """
    –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (role='admin') –æ –∑–∞–∫–∞–∑–∞—Ö,
    —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–¥–ª–∞–π–Ω <= (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + deadline_warning_days).
    """

    try:
        now = datetime.now(MOSCOW_TZ)
        warning_threshold = now + timedelta(days=deadline_warning_days)

        logging.info(f"üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –¥–æ {warning_threshold}")

        with db_connect() as conn:
            cursor = conn.cursor(pymysql.cursors.DictCursor)

            # –õ–æ–≥–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å
            cursor.execute("""
                SELECT * FROM pending_orders
                WHERE (status='new' OR status='notified')
                  AND deadline_at <= %s
            """, (warning_threshold,))
            deadline_orders = cursor.fetchall()

            logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º: {len(deadline_orders)}")
            if not deadline_orders:
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
            cursor.execute("""
                SELECT telegram_id
                FROM users
                WHERE role= 1
                  AND telegram_id IS NOT NULL
            """)
            admins = cursor.fetchall()

            logging.info(f"üë§ –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(admins)}")

            # –®–ª—ë–º –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É
            for order in deadline_orders:
                message = format_deadline_warning_message(order, deadline_warning_days)
                for adm in admins:
                    if adm["telegram_id"]:
                        logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {adm['telegram_id']} –ø–æ –∑–∞–∫–∞–∑—É ID {order['id']}")
                        try:
                            await bot.send_message(
                                chat_id=adm["telegram_id"],
                                text=message,
                                parse_mode="Markdown"
                            )
                            await asyncio.sleep(1)
                        except Exception as e:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {adm['telegram_id']}: {e}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–µ–¥–ª–∞–π–Ω–µ: {e}")

def format_deadline_warning_message(order, deadline_warning_days):
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –¥–µ–¥–ª–∞–π–Ω–µ.
    """
    return f"""
üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order['order_id']}*
üìå *–û–ø–∏—Å–∞–Ω–∏–µ:* {order['short_description']}
üí∞ *–¶–µ–Ω–∞:* {order['price']} ‚ÇΩ
üìÖ *–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:* {order['deadline_at']}
‚è≥ *–î–µ–¥–ª–∞–π–Ω –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ {deadline_warning_days} –¥–Ω! –ó–∞–∫–∞–∑ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –≤–∑—è—Ç!*
"""

async def notify_users(order, cursor, is_repeat=False):
    success = False
    if order["send_to_executor"]:
        success |= await send_to_role("4", order, is_repeat, cursor)
    if order["send_to_specialist"]:
        success |= await send_to_role("3", order, is_repeat, cursor)
    return success


async def send_to_role(role, order, is_repeat, cursor):
    try:
        message_text, reply_markup = format_order_message(order, is_repeat, role)
        cursor.execute("SELECT telegram_id FROM users WHERE role=%s AND telegram_id IS NOT NULL ORDER BY rating DESC",
                       (role,))
        users = cursor.fetchall()

        for user in users:
            try:
                await bot.send_message(
                    chat_id=user["telegram_id"],
                    text=message_text,
                    parse_mode="Markdown",
                    reply_markup=reply_markup
                )
                await asyncio.sleep(1)
                return True
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ role={role}: {e}")
        return False


def format_order_message(order, is_repeat, role):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.
    """
    if is_repeat:
        text = f"""üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order['order_id']}*
üìå *–û–ø–∏—Å–∞–Ω–∏–µ:* {order['short_description']}
üí∞ *–¶–µ–Ω–∞:* {order['price']} ‚ÇΩ
üìÖ *–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:* {order['deadline_at']}"""
    else:
        text = f"""üöÄ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order['order_id']}*
üìå *–û–ø–∏—Å–∞–Ω–∏–µ:* {order['short_description']}
üí∞ *–¶–µ–Ω–∞:* {order['price']} ‚ÇΩ
üìÖ *–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:* {order['deadline_at']}"""

    keyboard = []

    if role == '4':  # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (–º–æ–Ω—Ç–∞–∂–Ω–∏–∫)
        keyboard.append([
            InlineKeyboardButton("üõ†Ô∏è –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"executor_accept_order_{order['order_id']}"),
            InlineKeyboardButton("üîô –ù–µ –±–µ—Ä—É", callback_data=f"executor_decline_order_{order['order_id']}")
        ])
    elif role == '3':  # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
        keyboard.append([
            InlineKeyboardButton("üìå –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"specialist_accept_order_{order['order_id']}"),
            InlineKeyboardButton("‚ùå –ù–µ –ø—Ä–∏–Ω–∏–º–∞—é", callback_data=f"specialist_decline_order_{order['order_id']}")
        ])

    return text, InlineKeyboardMarkup(keyboard) if keyboard else None



if __name__ == "__main__":
    logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã!")
    loop = asyncio.get_event_loop()
    loop.create_task(notification_worker())
    loop.run_forever()