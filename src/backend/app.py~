from flask import Flask, render_template, request, session, redirect, url_for
from flask_session import Session
from config import SESSION_CONFIG
from utils import db_connect, verify_password
from werkzeug.security import generate_password_hash
from utils import db_connect, verify_password, hash_password


# Импортируем Blueprints
from admin_api import admin_bp
from dispatcher_api import dispatcher_bp
from specialist_api import specialist_bp
from executor_api import executor_bp
from customer_api import customer_bp

app = Flask(__name__)

# Настройка сессий из config.py
app.config['SESSION_TYPE'] = SESSION_CONFIG['type']
app.config['SESSION_PERMANENT'] = SESSION_CONFIG['permanent']
app.config['SESSION_FILE_DIR'] = SESSION_CONFIG['file_dir']
Session(app)

# Регистрация Blueprints
app.register_blueprint(admin_bp)
app.register_blueprint(dispatcher_bp)
app.register_blueprint(specialist_bp)
app.register_blueprint(executor_bp)
app.register_blueprint(customer_bp)

@app.route('/', methods=['GET', 'POST'])
def home():
    """
    Главная страница входа в систему.
    """
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']

        try:
            # Подключение к базе данных и проверка пользователя
            with db_connect() as conn:
                cursor = conn.cursor(dictionary=True)
                cursor.execute("""
                    SELECT u.id, u.password_hash, r.name AS role, u.name
                    FROM users u
                    JOIN roles r ON u.role = r.id
                    WHERE u.email = %s
                """, (email,))
                user = cursor.fetchone()

            if user and verify_password(password, user['password_hash']):
                session['user_id'] = user['id']
                session['role'] = user['role']
                session['name'] = user['name']
                print(f"[DEBUG] Успешный вход: role={user['role']}, name={user['name']}")

                # Перенаправление на страницу роли
                if user['role'] == 'Administrator':
                    return redirect(url_for('admin.orders'))
                elif user['role'] == 'Dispatcher':
                    return redirect(url_for('dispatcher.orders'))
                elif user['role'] == 'Specialist':
                    return redirect(url_for('specialist.orders'))
                elif user['role'] == 'Executor':
                    return redirect(url_for('executor.orders'))
                elif user['role'] == 'Customer':
                    return redirect(url_for('customer.orders'))
                else:
                    return redirect(url_for('home'))
            else:
                return render_template('index.html', error="Неверный логин или пароль")

        except Exception as e:
            print(f"[ERROR] Ошибка подключения к базе данных: {e}")
            return render_template('index.html', error="Ошибка сервера. Попробуйте позже.")

    return render_template('index.html')


@app.route('/register', methods=['GET', 'POST'])
def register():
    """
    Страница регистрации нового пользователя.
    """
    if request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        password = request.form['password']
        password_confirm = request.form['password_confirm']
        role = request.form['role']

        if password != password_confirm:
            return render_template('register.html', error="Пароли не совпадают")

        try:
            with db_connect() as conn:
                cursor = conn.cursor()

                # Проверка уникальности email
                cursor.execute("SELECT id FROM users WHERE email = %s", (email,))
                if cursor.fetchone():
                    return render_template('register.html', error="Email уже зарегистрирован")

                # Генерация bcrypt-хэша с помощью hash_password
                hashed_password = hash_password(password)
                print(f"[DEBUG] Создан хэш пароля: {hashed_password}")

                # Вставка нового пользователя
                cursor.execute("""
                    INSERT INTO users (name, email, password_hash, role)
                    VALUES (%s, %s, %s, %s)
                """, (name, email, hashed_password, role))
                conn.commit()

                print(f"[DEBUG] Пользователь {name} успешно зарегистрирован")

                # Установить данные сессии после регистрации
                session['user_id'] = cursor.lastrowid
                session['role'] = role
                session['name'] = name

                # Перенаправить пользователя в зависимости от его роли
                if role == '1':  # Administrator
                    return redirect(url_for('admin.orders'))
                elif role == '2':  # Dispatcher
                    return redirect(url_for('dispatcher.orders'))
                elif role == '3':  # Specialist
                    return redirect(url_for('specialist.orders'))
                elif role == '4':  # Executor
                    return redirect(url_for('executor.orders'))
                elif role == '5':  # Customer
                    return redirect(url_for('customer.orders'))
                else:
                    return redirect(url_for('home'))

        except Exception as e:
            print(f"[ERROR] Ошибка регистрации: {e}")
            return render_template('register.html', error="Ошибка сервера. Попробуйте позже.")

    return render_template('register.html')


@app.route('/logout')
def logout():
    """
    Выход из системы.
    """
    role = session.get('role')
    session.clear()

    # Логика перенаправления по роли
    if role == 'Administrator':
        return redirect(url_for('admin.orders'))
    elif role == 'Dispatcher':
        return redirect(url_for('dispatcher.orders'))
    elif role == 'Specialist':
        return redirect(url_for('specialist.orders'))
    elif role == 'Executor':
        return redirect(url_for('executor.orders'))
    elif role == 'Customer':
        return redirect(url_for('customer.orders'))
    else:
        return redirect(url_for('home'))


if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')
