import os
import sys
import logging
import asyncio
import pymysql
import pytz

from datetime import datetime, timedelta
from telegram import Bot
from telegram_bot.bot_token import TELEGRAM_BOT_TOKEN

# ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É "src" –≤ `sys.path`
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../..'))
if BASE_DIR not in sys.path:
    sys.path.insert(0, BASE_DIR)

# ‚úÖ –ò–º–ø–æ—Ä—Ç `db_connect`
from telegram_bot.bot_utils.bot_db_utils import db_connect

# üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")

# üì¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# üåç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MOSCOW_TZ = pytz.timezone("Europe/Moscow")


async def send_notifications():
    """üîÑ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    while True:
        now = datetime.now(MOSCOW_TZ)
        work_hours_start, work_hours_end, repeat_interval, _ = get_notification_settings()

        if work_hours_start <= now.time() < work_hours_end:
            logging.info("üì¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            await process_new_orders()
        else:
            logging.info("‚è≥ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ù–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")

        await asyncio.sleep(repeat_interval * 60)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤


async def send_repeat_notifications():
    """üîÑ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    while True:
        now = datetime.now(MOSCOW_TZ)
        work_hours_start, work_hours_end, _, repeat_notified_interval = get_notification_settings()

        if work_hours_start <= now.time() < work_hours_end:
            logging.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            await process_notified_orders()
        else:
            logging.info("‚è≥ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")

        await asyncio.sleep(repeat_notified_interval * 60)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏


def get_notification_settings():
    """üîç –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ë–î –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç `timedelta` –≤ `time`."""
    with db_connect() as conn:
        cursor = conn.cursor(pymysql.cursors.DictCursor)
        cursor.execute("""
            SELECT work_hours_start, work_hours_end, repeat_interval, repeat_notified_interval 
            FROM notification_settings WHERE id = 1
        """)
        settings = cursor.fetchone()

        work_hours_start = (datetime.min + settings["work_hours_start"]).time()
        work_hours_end = (datetime.min + settings["work_hours_end"]).time()
        repeat_interval = settings["repeat_interval"]
        repeat_notified_interval = settings["repeat_notified_interval"]

    logging.debug(f"üõ† –ü–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: start={work_hours_start}, end={work_hours_end}")
    return work_hours_start, work_hours_end, repeat_interval, repeat_notified_interval


async def process_new_orders():
    """üì© –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã `new` –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    try:
        with db_connect() as conn:
            cursor = conn.cursor(pymysql.cursors.DictCursor)
            cursor.execute("SELECT * FROM pending_orders WHERE status = 'new'")
            new_orders = cursor.fetchall()

            logging.info(f"üìå –ù–∞–π–¥–µ–Ω–æ {len(new_orders)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

            if not new_orders:
                return

            for order in new_orders:
                logging.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ ID: {order['id']}")
                success = await notify_users(order, conn, cursor)

                if success:
                    cursor.execute(
                        "UPDATE pending_orders SET status = 'notified', last_notified_at = NOW() WHERE id = %s",
                        (order["id"],),
                    )
                    conn.commit()
                    logging.info(f"‚úÖ –ó–∞–∫–∞–∑ {order['id']} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ —Å—Ç–∞—Ç—É—Å–∞ 'notified'.")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")


async def process_notified_orders():
    """üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã `notified` –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    try:
        now = datetime.now(MOSCOW_TZ)
        _, _, _, repeat_notified_interval = get_notification_settings()  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª

        check_time = now - timedelta(minutes=repeat_notified_interval)

        logging.info(f"üîç –ò—â–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º <= {check_time}")

        with db_connect() as conn:
            cursor = conn.cursor(pymysql.cursors.DictCursor)
            cursor.execute(
                "SELECT * FROM pending_orders WHERE status = 'notified' AND last_notified_at <= %s",
                (check_time,),
            )
            notified_orders = cursor.fetchall()

            logging.info(f"üîÅ –ù–∞–π–¥–µ–Ω–æ {len(notified_orders)} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

            if not notified_orders:
                return

            for order in notified_orders:
                logging.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ ID: {order['id']}")
                success = await notify_users(order, conn, cursor, is_repeat=True)

                if success:
                    cursor.execute(
                        "UPDATE pending_orders SET last_notified_at = NOW() WHERE id = %s",
                        (order["id"],),
                    )
                    conn.commit()
                    logging.info(f"‚úÖ –ó–∞–∫–∞–∑ {order['id']} –æ–±–Ω–æ–≤–ª–µ–Ω (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ).")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


async def notify_users(order, conn, cursor, is_repeat=False):
    """üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    message = format_order_message(order, is_repeat)
    success = False

    if order["send_to_executor"]:
        success = await send_to_role("4", message, cursor)

    if order["send_to_specialist"]:
        success = await send_to_role("3", message, cursor)

    return success


async def send_to_role(role, message, cursor):
    """üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é."""
    try:
        cursor.execute("""
            SELECT telegram_id FROM users 
            WHERE role = %s AND telegram_id IS NOT NULL
            ORDER BY rating DESC
        """, (role,))
        users = cursor.fetchall()

        if not users:
            logging.warning(f"‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é {role}")
            return False

        for user in users:
            try:
                await bot.send_message(chat_id=user["telegram_id"], text=message)
                await asyncio.sleep(1)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")

        logging.info(f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—å—é {role}")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {role}: {e}")
        return False


def format_order_message(order, is_repeat=False):
    """üìÑ –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ."""
    if is_repeat:
        return f"""
üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order['order_id']}*
üìå *–û–ø–∏—Å–∞–Ω–∏–µ:* {order['short_description']}
üí∞ *–¶–µ–Ω–∞:* {order['price']} ‚ÇΩ
üìÖ *–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:* {order['deadline_at']}
‚è≥ *–ó–∞–∫–∞–∑ –¥–æ —Å–∏—Ö –ø–æ—Ä —Å–≤–æ–±–æ–¥–µ–Ω!*
"""
    else:
        return f"""
üöÄ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order['order_id']}*
üìå *–û–ø–∏—Å–∞–Ω–∏–µ:* {order['short_description']}
üí∞ *–¶–µ–Ω–∞:* {order['price']} ‚ÇΩ
üìÖ *–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:* {order['deadline_at']}
üëÄ *–ö—Ç–æ –ø–µ—Ä–≤—ã–π –≤–æ–∑—å–º–µ—Ç –∑–∞–∫–∞–∑?*
"""


# üöÄ –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
if __name__ == "__main__":
    logging.info("üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!")

    loop = asyncio.get_event_loop()
    loop.create_task(send_notifications())  # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    loop.create_task(send_repeat_notifications())
    loop.run_forever()  # ‚úÖ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

