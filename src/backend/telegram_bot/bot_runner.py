import os
import sys
import logging
import asyncio
import threading
import signal  # ‚úÖ –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
from telegram.ext import ApplicationBuilder
from telegram_bot.handlers.registration import register_all_handlers
from bot_utils.bot_config import BOT_DB_CONFIG

# ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ `sys.path`
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '../..'))
if BASE_DIR not in sys.path:
    sys.path.insert(0, BASE_DIR)

# ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π
logging.info(f"üîç sys.path –≤ bot_runner.py:\n" + "\n".join(sys.path))

# ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º `start_notifications`
notification_thread = None
stop_notifications = threading.Event()  # –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

def start_notifications():
    """–§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ `notifications.py`"""
    global stop_notifications

    import os
    import sys
    if BASE_DIR not in sys.path:
        sys.path.insert(0, BASE_DIR)

    from bot_utils.messages.notifications import send_notifications

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    try:
        while not stop_notifications.is_set():
            loop.run_until_complete(send_notifications())
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ `start_notifications`: {e}")

def stop_all():
    """üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç `start_notifications` –∏ Telegram-–±–æ—Ç –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º."""
    global notification_thread, stop_notifications

    logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")

    # ‚úÖ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ `start_notifications`
    if notification_thread and notification_thread.is_alive():
        stop_notifications.set()
        notification_thread.join()

    logging.info("‚úÖ –í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

def run_bot():
    """
    –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    global notification_thread, stop_notifications

    try:
        from bot_token import TELEGRAM_BOT_TOKEN
        if not TELEGRAM_BOT_TOKEN:
            raise ValueError("–¢–æ–∫–µ–Ω Telegram –Ω–µ —É–∫–∞–∑–∞–Ω!")

        application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
        register_all_handlers(application)

        # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º `notifications.py` –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω)
        if not notification_thread or not notification_thread.is_alive():
            stop_notifications.clear()
            notification_thread = threading.Thread(target=start_notifications, daemon=True)
            notification_thread.start()
            logging.info("üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!")

        logging.info("‚úÖ Telegram-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        application.run_polling()

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    # ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å `start_notifications`
    signal.signal(signal.SIGINT, lambda signum, frame: stop_all())
    signal.signal(signal.SIGTERM, lambda signum, frame: stop_all())

    run_bot()
