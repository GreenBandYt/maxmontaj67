import os
import sys
import logging
import asyncio
import pymysql
import pytz

from datetime import datetime, timedelta
from telegram import Bot
from telegram_bot.bot_token import TELEGRAM_BOT_TOKEN

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É "src" –≤ sys.path –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../..'))
if BASE_DIR not in sys.path:
    sys.path.insert(0, BASE_DIR)

# –ò–º–ø–æ—Ä—Ç db_connect
from telegram_bot.bot_utils.bot_db_utils import db_connect

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MOSCOW_TZ = pytz.timezone("Europe/Moscow")


async def notification_worker():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    –ö–∞–∂–¥—ã–µ repeat_interval (–∏–ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π) –º–∏–Ω—É—Ç:
      1) process_new_orders()      - –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
      2) process_notified_orders() - –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      3) process_deadline_orders() - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ
    """
    while True:
        now = datetime.now(MOSCOW_TZ)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        work_hours_start, work_hours_end, repeat_interval, repeat_notified_interval, deadline_warning_days = get_notification_settings()

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä—ë–º repeat_interval
        adaptive_interval = repeat_interval

        # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π (—Å–±, –≤—Å)
        if now.weekday() in [5, 6]:
            logging.info("üö´ –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å! –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 8 —á–∞—Å–æ–≤.")
            adaptive_interval = 8 * 60

        # –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if not (work_hours_start <= now.time() < work_hours_end):
            logging.info("‚è≥ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 30 –º–∏–Ω—É—Ç.")
            adaptive_interval = 30

        # 1) –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        await process_new_orders()
        # 2) –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await process_notified_orders()
        # 3) –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞
        await process_deadline_orders(deadline_warning_days)

        logging.info(f"‚è± –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏: {adaptive_interval} –º–∏–Ω—É—Ç")
        await asyncio.sleep(adaptive_interval * 60)


def get_notification_settings():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ë–î: work_hours_start/end, repeat_interval,
    repeat_notified_interval, deadline_warning_days.
    –ü—Ä–∏–≤–æ–¥–∏—Ç work_hours_... –∫ time, –µ—Å–ª–∏ —ç—Ç–æ timedelta.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (work_hours_start, work_hours_end, repeat_interval,
                repeat_notified_interval, deadline_warning_days).
    """
    with db_connect() as conn:
        cursor = conn.cursor(pymysql.cursors.DictCursor)
        cursor.execute("""
            SELECT work_hours_start, work_hours_end,
                   repeat_interval, repeat_notified_interval,
                   deadline_warning_days
            FROM notification_settings
            WHERE id = 1
        """)
        settings = cursor.fetchone()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ time, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –∫–∞–∫ timedelta
        if isinstance(settings["work_hours_start"], timedelta):
            work_hours_start = (datetime.min + settings["work_hours_start"]).time()
        else:
            work_hours_start = settings["work_hours_start"]

        if isinstance(settings["work_hours_end"], timedelta):
            work_hours_end = (datetime.min + settings["work_hours_end"]).time()
        else:
            work_hours_end = settings["work_hours_end"]

        repeat_interval = settings["repeat_interval"]
        repeat_notified_interval = settings["repeat_notified_interval"]
        deadline_warning_days = settings["deadline_warning_days"]

    logging.debug(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: start={work_hours_start}, end={work_hours_end}, "
        f"repeat={repeat_interval} –º–∏–Ω, repeat_notified={repeat_notified_interval}, "
        f"deadline_warning={deadline_warning_days} –¥–Ω."
    )
    return work_hours_start, work_hours_end, repeat_interval, repeat_notified_interval, deadline_warning_days


async def process_new_orders():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã (status='new') –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ => —Å—Ç–∞–≤–∏–º last_notified_at=NOW(), status='notified'.
    –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∏–∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å,
    –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–∫–∞–∑ –≤ 'notified', —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—Ç—Ä–µ–≤–∞–ª –≤ 'new'.
    """
    try:
        with db_connect() as conn:
            cursor = conn.cursor(pymysql.cursors.DictCursor)
            logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
            cursor.execute("SELECT * FROM pending_orders WHERE status='new'")
            new_orders = cursor.fetchall()

            if not new_orders:
                logging.info("–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
                return

            for order in new_orders:
                logging.info(f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ID: {order['id']} -> –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                success = await notify_users(order, cursor)

                logging.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ ID {order['id']}: {success}")

                # –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç success, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑ –Ω–µ –≤–∏—Å–µ–ª –≤ new
                try:
                    logging.info(f"–û–±–Ω–æ–≤–ª—è–µ–º last_notified_at –∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ID {order['id']}")
                    cursor.execute("""
                        UPDATE pending_orders
                        SET last_notified_at = NOW(),
                            status='notified'
                        WHERE id = %s
                    """, (order["id"],))
                    conn.commit()
                    logging.info(f"–ó–∞–∫–∞–∑ ID {order['id']} —Ç–µ–ø–µ—Ä—å status='notified'")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ID {order['id']}: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")


async def process_notified_orders():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'notified', –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ repeat_notified_interval –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ last_notified_at.
    """
    try:
        now = datetime.now(MOSCOW_TZ)
        # –ë–µ—Ä—ë–º repeat_notified_interval
        _, _, _, repeat_notified_interval, _ = get_notification_settings()

        check_time = now - timedelta(minutes=repeat_notified_interval, seconds=5)

        with db_connect() as conn:
            cursor = conn.cursor(pymysql.cursors.DictCursor)
            cursor.execute("""
                SELECT * FROM pending_orders
                WHERE status='notified'
                  AND last_notified_at <= %s
            """, (check_time,))
            notified_orders = cursor.fetchall()

            if not notified_orders:
                return

            for order in notified_orders:
                logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ ID: {order['id']}")
                success = await notify_users(order, cursor, is_repeat=True)
                # –ï—Å–ª–∏ success ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º last_notified_at
                # (–ò–Ω–∞—á–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ —Å–Ω–æ–≤–∞ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è)
                if success:
                    cursor.execute("""
                        UPDATE pending_orders
                        SET last_notified_at = NOW()
                        WHERE id = %s
                    """, (order["id"],))
                    conn.commit()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


async def process_deadline_orders(deadline_warning_days):
    """
    –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (role='admin') –æ –∑–∞–∫–∞–∑–∞—Ö,
    —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–¥–ª–∞–π–Ω <= (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + deadline_warning_days).
    """

    try:
        now = datetime.now(MOSCOW_TZ)
        warning_threshold = now + timedelta(days=deadline_warning_days)

        logging.info(f"üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –¥–æ {warning_threshold}")

        with db_connect() as conn:
            cursor = conn.cursor(pymysql.cursors.DictCursor)

            # –õ–æ–≥–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å
            cursor.execute("""
                SELECT * FROM pending_orders
                WHERE (status='new' OR status='notified')
                  AND deadline_at <= %s
            """, (warning_threshold,))
            deadline_orders = cursor.fetchall()

            logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º: {len(deadline_orders)}")
            if not deadline_orders:
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
            cursor.execute("""
                SELECT telegram_id
                FROM users
                WHERE role= 1
                  AND telegram_id IS NOT NULL
            """)
            admins = cursor.fetchall()

            logging.info(f"üë§ –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(admins)}")

            # –®–ª—ë–º –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É
            for order in deadline_orders:
                message = format_deadline_warning_message(order, deadline_warning_days)
                for adm in admins:
                    if adm["telegram_id"]:
                        logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {adm['telegram_id']} –ø–æ –∑–∞–∫–∞–∑—É ID {order['id']}")
                        try:
                            await bot.send_message(
                                chat_id=adm["telegram_id"],
                                text=message,
                                parse_mode="Markdown"
                            )
                            await asyncio.sleep(1)
                        except Exception as e:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {adm['telegram_id']}: {e}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–µ–¥–ª–∞–π–Ω–µ: {e}")

def format_deadline_warning_message(order, deadline_warning_days):
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –¥–µ–¥–ª–∞–π–Ω–µ.
    """
    return f"""
üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order['order_id']}*
üìå *–û–ø–∏—Å–∞–Ω–∏–µ:* {order['short_description']}
üí∞ *–¶–µ–Ω–∞:* {order['price']} ‚ÇΩ
üìÖ *–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:* {order['deadline_at']}
‚è≥ *–î–µ–¥–ª–∞–π–Ω –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ {deadline_warning_days} –¥–Ω! –ó–∞–∫–∞–∑ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –≤–∑—è—Ç!*
"""


async def notify_users(order, cursor, is_repeat=False):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º/—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º).
    –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–æ–≥–æ (–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å), success=False.
    """
    message = format_order_message(order, is_repeat)
    success = False

    if order["send_to_executor"]:
        result = await send_to_role("4", message, cursor)
        if result:
            success = True

    if order["send_to_specialist"]:
        result = await send_to_role("3", message, cursor)
        if result:
            success = True

    logging.info(f"notify_users –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è ID {order['id']} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {success}")
    return success


async def send_to_role(role, message, cursor):
    """
    –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É.
    """
    try:
        cursor.execute("""
            SELECT telegram_id
            FROM users
            WHERE role = %s
              AND telegram_id IS NOT NULL
            ORDER BY rating DESC
        """, (role,))
        users = cursor.fetchall()

        if not users:
            logging.warning(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é {role}")
            return False

        # –õ–æ–≥–∏–∫–∞: –æ—Ç–ø—Ä–∞–≤–∏–º –ø–µ—Ä–≤–æ–º—É —É—Å–ø–µ—à–Ω–æ–º—É (–æ—Å—Ç–∞–ª—å–Ω—ã–º –Ω–µ—Ç)
        for user in users:
            try:
                await bot.send_message(chat_id=user["telegram_id"], text=message, parse_mode="Markdown")
                await asyncio.sleep(1)
                return True
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")

        return False

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º role={role}: {e}")
        return False


def format_order_message(order, is_repeat=False):
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π/—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –æ –∑–∞–∫–∞–∑–µ. Markdown-—Ñ–æ—Ä–º–∞—Ç.
    """
    if is_repeat:
        return f"""
üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order['order_id']}*
üìå *–û–ø–∏—Å–∞–Ω–∏–µ:* {order['short_description']}
üí∞ *–¶–µ–Ω–∞:* {order['price']} ‚ÇΩ
üìÖ *–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:* {order['deadline_at']}
‚è≥ *–ó–∞–∫–∞–∑ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –≤–∑—è—Ç –Ω–∏–∫–µ–º –≤ —Ä–∞–±–æ—Ç—É!*
"""
    else:
        return f"""
üöÄ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order['order_id']}*
üìå *–û–ø–∏—Å–∞–Ω–∏–µ:* {order['short_description']}
üí∞ *–¶–µ–Ω–∞:* {order['price']} ‚ÇΩ
üìÖ *–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:* {order['deadline_at']}
üëÄ *–ö—Ç–æ –ø–µ—Ä–≤—ã–π –≤–æ–∑—å–º–µ—Ç –∑–∞–∫–∞–∑?*
"""


# –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
if __name__ == "__main__":
    logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã!")
    loop = asyncio.get_event_loop()
    loop.create_task(notification_worker())
    loop.run_forever()
