from flask import Flask, render_template, request, session, redirect, url_for
from flask_session import Session
from config import SESSION_CONFIG
from utils import db_connect, verify_password, hash_password

# Настройка приложения Flask
app = Flask(__name__)

# Конфигурация сессий из файла config.py
app.config['SESSION_TYPE'] = SESSION_CONFIG['type']  # Тип сессий (например, файловый)
app.config['SESSION_PERMANENT'] = SESSION_CONFIG['permanent']  # Должны ли сессии быть постоянными
app.config['SESSION_FILE_DIR'] = SESSION_CONFIG['file_dir']  # Директория для хранения сессий
Session(app)  # Инициализация сессий

@app.route('/', methods=['GET', 'POST'])
def home():
    """
    Главная страница входа в систему.
    Обрабатывает вход пользователя и перенаправляет его в зависимости от роли.
    """
    if request.method == 'POST':  # Если метод POST, обрабатываем данные формы
        email = request.form.get('email')  # Получаем email из формы
        password = request.form.get('password')  # Получаем пароль из формы

        # Логируем полученные данные (пароль отображается как звёздочки)
        app.logger.debug(f"Полученные данные: email={email}, password={'*' * len(password) if password else None}")

        try:
            # Подключение к базе данных
            with db_connect() as conn:
                cursor = conn.cursor()
                query = """
                    SELECT u.id, u.password_hash, r.name AS role, u.name
                    FROM users u
                    JOIN roles r ON u.role = r.id
                    WHERE u.email = %s
                """
                # Логируем SQL-запрос и параметры
                app.logger.debug(f"Выполнение SQL-запроса: {query} с параметром: {email}")
                cursor.execute(query, (email,))
                user = cursor.fetchone()  # Получаем данные пользователя

                if user:
                    # Логируем успешный запрос
                    app.logger.debug(f"Найден пользователь: {user}")
                else:
                    # Если пользователь не найден, логируем это
                    app.logger.warning(f"Пользователь с email {email} не найден.")
                    return render_template('index.html', error="Неверный логин или пароль")

            # Логируем попытку проверки пароля
            app.logger.debug(f"[DEBUG] Попытка проверки пароля для хэша: {user['password_hash']}")
            if verify_password(password, user['password_hash']):
                # Успешный вход
                app.logger.info(f"Успешный вход: role={user['role']}, name={user['name']}")

                # Сохраняем данные пользователя в сессии
                session['user_id'] = user['id']  # ID пользователя
                session['role'] = user['role']  # Роль пользователя
                session['name'] = user['name']  # Имя пользователя

                # Перенаправление пользователя в зависимости от роли
                role_redirects = {
                    'Administrator': 'admin.orders',  # Администратор
                    'Dispatcher': 'dispatcher.orders',  # Диспетчер
                    'Specialist': 'specialist.orders',  # Специалист
                    'Executor': 'executor.orders',  # Исполнитель
                    'Customer': 'customer.orders',  # Заказчик
                }
                return redirect(url_for(role_redirects.get(user['role'], 'home')))  # Перенаправление

            else:
                # Если пароль неверный, логируем это
                app.logger.warning("Ошибка проверки пароля: пароль не совпадает")
                return render_template('index.html', error="Неверный логин или пароль")

        except Exception as e:
            # Логируем любую неожиданную ошибку
            app.logger.error(f"Неожиданная ошибка: {e}")
            return render_template('index.html', error="Ошибка сервера. Попробуйте позже.")

    # Если метод GET, отображаем форму входа
    return render_template('index.html')

if __name__ == '__main__':
    # Запускаем сервер
    app.run(debug=True, host='0.0.0.0')
