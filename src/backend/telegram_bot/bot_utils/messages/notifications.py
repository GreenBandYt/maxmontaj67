import os
import sys
import logging
import asyncio
import pymysql  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

from datetime import datetime
from telegram import Bot
from telegram_bot.bot_token import TELEGRAM_BOT_TOKEN

# ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É "src" –≤ `sys.path`
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../..'))
if BASE_DIR not in sys.path:
    sys.path.insert(0, BASE_DIR)

# ‚úÖ –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç `db_connect` –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
from telegram_bot.bot_utils.bot_db_utils import db_connect


# üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")

# üì¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# ‚è≥ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
WORK_HOURS = (8, 20)  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å 08:00 –¥–æ 20:00

async def send_notifications():
    """
    üîÑ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã.
    """
    while True:
        now = datetime.now()
        if WORK_HOURS[0] <= now.hour < WORK_HOURS[1]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            logging.info("üì¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            await process_new_orders()
        else:
            logging.info("‚è≥ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

async def process_new_orders():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –≤ `pending_orders` –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    try:
        with db_connect() as conn:
            cursor = conn.cursor(pymysql.cursors.DictCursor)  # ‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º DictCursor
            cursor.execute("SELECT * FROM pending_orders WHERE status = 'new'")
            new_orders = cursor.fetchall()

            logging.info(f"üìå –ù–∞–π–¥–µ–Ω–æ {len(new_orders)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

            if not new_orders:
                logging.info("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                return

            for order in new_orders:
                logging.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ ID: {order['id']}")
                await notify_users(order, conn, cursor)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")



async def notify_users(order, conn, cursor):
    """
    üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.
    """
    message = format_order_message(order)
    success = False

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
    if order["send_to_executor"]:
        success = await send_to_role("4", message, cursor)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
    if order["send_to_specialist"]:
        success = await send_to_role("3", message, cursor)

    # ‚úÖ –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    if success:
        cursor.execute(
            "UPDATE pending_orders SET status = 'notified' WHERE id = %s", (order["id"],)
        )
        conn.commit()
        logging.info(f"üîÑ –ó–∞–∫–∞–∑ {order['id']} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å 'notified'")

async def send_to_role(role, message, cursor):
    """
    üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é.
    """
    try:
        cursor.execute(
            """
            SELECT telegram_id FROM users 
            WHERE role = %s AND telegram_id IS NOT NULL
            ORDER BY rating DESC
            """,
            (role,),
        )
        users = cursor.fetchall()

        if not users:
            logging.warning(f"‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é {role}")
            return False

        for user in users:
            try:
                await bot.send_message(chat_id=user["telegram_id"], text=message)
                await asyncio.sleep(1)  # ‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")

        logging.info(f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—å—é {role}")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {role}: {e}")
        return False

def format_order_message(order):
    """
    üìÑ –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ.
    """
    return f"""
üöÄ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order['order_id']}*
üìå *–û–ø–∏—Å–∞–Ω–∏–µ:* {order['short_description']}
üí∞ *–¶–µ–Ω–∞:* {order['price']} ‚ÇΩ
üìÖ *–î–µ–¥–ª–∞–π–Ω:* {order['deadline_at']}
üëÄ *–ö—Ç–æ –ø–µ—Ä–≤—ã–π –≤–æ–∑—å–º–µ—Ç –∑–∞–∫–∞–∑?*
"""

# üöÄ –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
if __name__ == "__main__":
    logging.info("üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!")
    asyncio.run(send_notifications())
