# src/backend/telegram_bot/handlers/specialist/specialist_menu.py

from telegram import Update
from telegram.ext import ContextTypes
from .specialist_keyboards import specialist_keyboard

import logging
import pymysql
from bot_utils.bot_db_utils import db_connect
from telegram import ReplyKeyboardMarkup

from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram_bot.bot_utils.messages.notifications import format_order_message  # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
from telegram_bot.bot_utils.access_control import check_access, check_state
from telegram_bot.bot_utils.db_utils import update_user_state, get_user_role

async def specialist_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
    """
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {update.effective_user.first_name}!\n"
        "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=specialist_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    )

async def handle_specialist_new_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏).
    """
    telegram_id = update.message.from_user.id
    logging.info(f"[SPECIALIST] {telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")

    with db_connect() as conn:
        cursor = conn.cursor(pymysql.cursors.DictCursor)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        cursor.execute("""
            SELECT * FROM pending_orders
            WHERE (status = 'new' OR status = 'notified')
              AND send_to_specialist = 1
        """)
        new_orders = cursor.fetchall()

        if not new_orders:
            await update.message.reply_text("üîî –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.",
                                            reply_markup=specialist_keyboard())  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            return

        for order in new_orders:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
            message_text, reply_markup = format_order_message(order, is_repeat=False, role="3")
            if reply_markup:
                await update.message.reply_text(message_text, parse_mode="Markdown", reply_markup=reply_markup)
            else:
                await update.message.reply_text(message_text, parse_mode="Markdown")

async def handle_specialist_current_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
    """
    # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ update –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑ callback_query
    if update.message:
        telegram_id = update.message.from_user.id
    elif update.callback_query:
        telegram_id = update.callback_query.from_user.id
    else:
        logging.error("‚ö† –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø update –¥–ª—è handle_specialist_current_tasks.")
        return

    logging.info(f"[SPECIALIST] {telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π.")

    with db_connect() as conn:
        cursor = conn.cursor(pymysql.cursors.DictCursor)

        # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π
        cursor.execute("""
            SELECT 
                o.id AS order_id, 
                o.customer_address, 
                c.phone AS customer_phone, 
                o.description, 
                o.montage_date, 
                o.deadline_at 
            FROM 
                orders o
            JOIN 
                customers c ON o.customer_id = c.id
            WHERE 
                o.installer_id = (SELECT id FROM users WHERE telegram_id = %s) AND 
                o.status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
        """, (telegram_id,))
        current_orders = cursor.fetchall()

        if not current_orders:
            # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback_query, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if update.message:
                await update.message.reply_text("üõ†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π.")
            elif update.callback_query:
                await update.callback_query.message.reply_text("üõ†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        for order in current_orders:
            message = f"""
üìã *–¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ ‚Ññ{order['order_id']}*
üè† *–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞:* {order['customer_address']}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:* {order['customer_phone']}
üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {order['description']}
üìÖ *–î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞:* {order['montage_date'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}
‚è∞ *–î–µ–¥–ª–∞–π–Ω:* {order['deadline_at']}
"""
            reply_markup = create_specialist_buttons(order["order_id"])

            # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback_query, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if update.message:
                await update.message.reply_text(message, parse_mode="Markdown", reply_markup=reply_markup)
            elif update.callback_query:
                await update.callback_query.message.reply_text(message, parse_mode="Markdown", reply_markup=reply_markup)

async def handle_specialist_accept_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    order_id = int(query.data.split("_")[-1])
    telegram_id = query.from_user.id

    logging.info(f"[SPECIALIST] {telegram_id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ {order_id}")

    with db_connect() as conn:
        cursor = conn.cursor(pymysql.cursors.DictCursor)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        cursor.execute("SELECT status FROM orders WHERE id = %s", (order_id,))
        order = cursor.fetchone()

        if not order:
            logging.error(f"[SPECIALIST] –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!")
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —É–¥–∞–ª—ë–Ω.")
            return

        if order["status"] == "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è":
            logging.warning(f"[SPECIALIST] –ó–∞–∫–∞–∑ {order_id} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!")
            await query.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!", show_alert=True)
            await query.edit_message_text("‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return

        # –ù–∞—Ö–æ–¥–∏–º user_id –ø–æ telegram_id
        cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (telegram_id,))
        user = cursor.fetchone()

        if not user:
            logging.error(f"[SPECIALIST] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!")
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
            return

        user_id = user["id"]
        logging.info(f"[SPECIALIST] –ù–∞–π–¥–µ–Ω user_id {user_id} –¥–ª—è telegram_id {telegram_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        sql = "UPDATE orders SET installer_id = %s, status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' WHERE id = %s"
        logging.info(f"SQL QUERY: {sql} | DATA: ({user_id}, {order_id})")
        cursor.execute(sql, (user_id, order_id))
        conn.commit()
        logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ë–î")

        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ pending_orders
        cursor.execute("DELETE FROM pending_orders WHERE order_id = %s", (order_id,))
        conn.commit()
        logging.info(f"üóëÔ∏è –ó–∞–∫–∞–∑ {order_id} —É–¥–∞–ª—ë–Ω –∏–∑ pending_orders")

    await query.answer("‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É!", show_alert=True)
    await query.edit_message_reply_markup(None)
    await query.edit_message_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.")

async def handle_specialist_decline_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚ùå –ù–µ –ø—Ä–∏–Ω–∏–º–∞—é" (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç).
    """
    query = update.callback_query
    order_id = query.data.split("_")[-1]  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞

    logging.info(f"[SPECIALIST] {query.from_user.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞ {order_id}")

    await query.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞.", show_alert=True)
    await query.edit_message_reply_markup(None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

def create_specialist_buttons(order_id):
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
    """
    buttons = [
        [
            InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞", callback_data=f"specialist_set_montage_date_{order_id}"),
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", callback_data=f"specialist_complete_order_{order_id}")
        ]
    ]
    return InlineKeyboardMarkup(buttons)

@check_state(required_state="specialist_idle")
async def handle_specialist_set_montage_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìÖ –î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞" –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
    –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º "–≤–≤–æ–¥–∞ –¥–∞—Ç—ã –º–æ–Ω—Ç–∞–∂–∞".
    """
    query = update.callback_query
    callback_data = query.data
    order_id = int(callback_data.split("_")[-1])
    user_id = update.effective_user.id
    logging.info(f"[SPECIALIST] {user_id} –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–∞—Ç—ã –º–æ–Ω—Ç–∞–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ user_data
    context.user_data["order_id"] = order_id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with db_connect() as conn:
        cursor = conn.cursor(pymysql.cursors.DictCursor)
        cursor.execute("""
            SELECT 
                o.customer_address, 
                c.phone AS customer_phone, 
                o.montage_date, 
                o.description
            FROM 
                orders o
            JOIN 
                customers c ON o.customer_id = c.id
            WHERE 
                o.id = %s AND o.installer_id = (SELECT id FROM users WHERE telegram_id = %s)
        """, (order_id, user_id))
        order = cursor.fetchone()

    if not order:
        logging.error(f"[SPECIALIST] –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –°–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await update_user_state(user_id, "specialist_date_input")
    logging.info(f"[SPECIALIST] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 'specialist_date_input'")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–∫–∞–∑–µ
    await query.answer("–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –º–æ–Ω—Ç–∞–∂–∞.", show_alert=False)
    montage_date = order["montage_date"] or "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
    await query.message.reply_text(
        f"üìã *–¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ ‚Ññ{order_id}*\n"
        f"üè† *–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞:* {order['customer_address']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:* {order['customer_phone']}\n"
        f"üìÖ *–î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞:* {montage_date}\n"
        "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –º–æ–Ω—Ç–∞–∂–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *YYYY-MM-DD*",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é"]], resize_keyboard=True)
    )

@check_state("specialist_date_input")
async def handle_specialist_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –º–æ–Ω—Ç–∞–∂–∞ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
    """
    user_id = update.effective_user.id
    order_id = context.user_data.get("order_id")  # ID –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ user_data –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞"
    input_text = update.message.text.strip()

    logging.info(f"[SPECIALIST] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É –º–æ–Ω—Ç–∞–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: '{input_text}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    try:
        montage_date = datetime.strptime(input_text, "%Y-%m-%d").date()
        context.user_data["montage_date"] = montage_date  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ user_data
    except ValueError:
        logging.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{input_text}'")
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-02-20."
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç"
    confirm_message = (
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—É –º–æ–Ω—Ç–∞–∂–∞: *{montage_date.strftime('%Y-%m-%d')}*?"
    )
    confirm_buttons = [
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"specialist_confirm_date_input_{order_id}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"specialist_cancel_date_input_{order_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(confirm_buttons)

    await update.message.reply_text(
        confirm_message,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

    logging.info(f"‚úÖ –í–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞ {montage_date} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")

@check_state(required_state="specialist_date_input")
async def handle_specialist_date_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –º–æ–Ω—Ç–∞–∂–∞ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
    """
    query = update.callback_query
    callback_data = query.data
    user_id = update.effective_user.id
    order_id = context.user_data.get("order_id")
    montage_date = context.user_data.get("montage_date")

    logging.info(f"[SPECIALIST] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {callback_data}.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not order_id or not montage_date:
        logging.error(f"[SPECIALIST] order_id –∏–ª–∏ montage_date –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –¥–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if callback_data == f"specialist_confirm_date_input_{order_id}":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –º–æ–Ω—Ç–∞–∂–∞ –≤ –ë–î
        try:
            with db_connect() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "UPDATE orders SET montage_date = %s WHERE id = %s",
                    (montage_date, order_id)
                )
                conn.commit()

            logging.info(f"‚úÖ –î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞ {montage_date} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}.")
            await query.answer("‚úÖ –î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", show_alert=False)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await query.edit_message_text(
                f"‚úÖ –î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞ *{montage_date}* —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}.",
                parse_mode="Markdown"
            )

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
            await update_user_state(user_id, "specialist_idle")
            await handle_specialist_current_tasks(update, context)

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –º–æ–Ω—Ç–∞–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

    elif callback_data == f"specialist_cancel_date_input_{order_id}":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        logging.info(f"[SPECIALIST] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}.")
        await query.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", show_alert=False)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
        await update_user_state(user_id, "specialist_date_input")
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –º–æ–Ω—Ç–∞–∂–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥ –≤ –∑–∞–∫–∞–∑—ã'.",
            reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )

    else:
        logging.warning(f"[SPECIALIST] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {callback_data} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

@check_state(required_state="specialist_date_input")
async def handle_specialist_cancel_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –∑–∞–∫–∞–∑—ã".
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á.
    """
    query = update.callback_query
    user_id = update.effective_user.id

    logging.info(f"[SPECIALIST] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ –≤ –∑–∞–∫–∞–∑—ã'.")

    # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á
    await update_user_state(user_id, "specialist_idle")
    logging.info(f"[SPECIALIST] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 'specialist_idle'.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–Ω –≤–æ–∑–≤—Ä–∞—â–µ–Ω –∫ –∑–∞–¥–∞—á–∞–º
    await query.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π.", show_alert=False)

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á
    await handle_specialist_current_tasks(update, context)

async def handle_specialist_return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é".
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
    """
    user_id = update.effective_user.id
    logging.info(f"[SPECIALIST] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
    await update_user_state(user_id, "specialist_idle")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    await handle_specialist_new_tasks(update, context)

