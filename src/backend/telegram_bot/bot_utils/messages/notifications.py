import os
import sys
import logging
import asyncio
import pymysql
import pytz

from datetime import datetime, timedelta
from telegram import Bot
from telegram_bot.bot_token import TELEGRAM_BOT_TOKEN

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É "src" –≤ sys.path, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../..'))
if BASE_DIR not in sys.path:
    sys.path.insert(0, BASE_DIR)

# –ò–º–ø–æ—Ä—Ç db_connect
from telegram_bot.bot_utils.bot_db_utils import db_connect

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ Python
MOSCOW_TZ = pytz.timezone("Europe/Moscow")


async def notification_worker():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    while True:
        now = datetime.now(MOSCOW_TZ)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ë–î
        work_hours_start, work_hours_end, repeat_interval, repeat_notified_interval = get_notification_settings()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏
        adaptive_interval = repeat_interval

        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π (—Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        if now.weekday() in [5, 6]:
            logging.info("üö´ –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å! –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 8 —á–∞—Å–æ–≤.")
            adaptive_interval = 8 * 60  # 8 —á–∞—Å–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö

        # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        if not (work_hours_start <= now.time() < work_hours_end):
            logging.info("‚è≥ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 30 –º–∏–Ω—É—Ç.")
            adaptive_interval = 30  # 30 –º–∏–Ω—É—Ç

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await process_new_orders()
        await process_notified_orders()

        logging.info(f"‚è± –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏: {adaptive_interval} –º–∏–Ω—É—Ç")
        await asyncio.sleep(adaptive_interval * 60)


def get_notification_settings():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ë–î –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∫ —Ç–∏–ø—É time."""
    with db_connect() as conn:
        cursor = conn.cursor(pymysql.cursors.DictCursor)
        cursor.execute("""
            SELECT work_hours_start, work_hours_end, repeat_interval, repeat_notified_interval 
            FROM notification_settings WHERE id = 1
        """)
        settings = cursor.fetchone()

        # –ï—Å–ª–∏ –ø–æ–ª—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ timedelta, —Ç–æ –ø—Ä–∏–≤–æ–¥–∏–º –∏—Ö –∫ —Ç–∏–ø—É time:
        if isinstance(settings["work_hours_start"], timedelta):
            work_hours_start = (datetime.min + settings["work_hours_start"]).time()
        else:
            work_hours_start = settings["work_hours_start"]

        if isinstance(settings["work_hours_end"], timedelta):
            work_hours_end = (datetime.min + settings["work_hours_end"]).time()
        else:
            work_hours_end = settings["work_hours_end"]

        repeat_interval = settings["repeat_interval"]
        repeat_notified_interval = settings["repeat_notified_interval"]

    logging.debug(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: start={work_hours_start}, end={work_hours_end}, repeat={repeat_interval} –º–∏–Ω.")
    return work_hours_start, work_hours_end, repeat_interval, repeat_notified_interval



async def process_new_orders():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    try:
        with db_connect() as conn:
            cursor = conn.cursor(pymysql.cursors.DictCursor)
            logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
            cursor.execute("SELECT * FROM pending_orders WHERE status = 'new'")
            new_orders = cursor.fetchall()

            if not new_orders:
                logging.info("–ù–æ–≤–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
                return

            for order in new_orders:
                logging.info(f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ID: {order['id']} -> –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                success = await notify_users(order, cursor)

                logging.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ ID {order['id']}: {success}")

                if success:
                    try:
                        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ID {order['id']}")
                        cursor.execute("""
                            UPDATE pending_orders 
                            SET last_notified_at = NOW()
                            WHERE id = %s
                        """, (order["id"],))
                        conn.commit()
                        logging.info(f"–ó–∞–∫–∞–∑ ID {order['id']} –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ 'notified'")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ID {order['id']}: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")


async def process_notified_orders():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å —Å—Ç–∞—Ç—É—Å–æ–º 'notified' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    try:
        now = datetime.now(MOSCOW_TZ)
        _, _, _, repeat_notified_interval = get_notification_settings()
        check_time = now - timedelta(minutes=repeat_notified_interval, seconds=5)

        with db_connect() as conn:
            cursor = conn.cursor(pymysql.cursors.DictCursor)
            cursor.execute("""
                SELECT * FROM pending_orders 
                WHERE status = 'notified' AND last_notified_at <= %s
            """, (check_time,))
            notified_orders = cursor.fetchall()

            if not notified_orders:
                return

            for order in notified_orders:
                logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ ID: {order['id']}")
                success = await notify_users(order, cursor, is_repeat=True)

                if success:
                    cursor.execute("""
                        UPDATE pending_orders 
                        SET last_notified_at = NOW()
                        WHERE id = %s
                    """, (order["id"],))
                    conn.commit()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


async def notify_users(order, cursor, is_repeat=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    message = format_order_message(order, is_repeat)
    success = False

    if order["send_to_executor"]:
        result = await send_to_role("4", message, cursor)
        if result:
            success = True

    if order["send_to_specialist"]:
        result = await send_to_role("3", message, cursor)
        if result:
            success = True

    logging.info(f"notify_users –¥–ª—è ID {order['id']} –∑–∞–≤–µ—Ä—à—ë–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {success}")
    return success


async def send_to_role(role, message, cursor):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é."""
    try:
        cursor.execute("""
            SELECT telegram_id FROM users 
            WHERE role = %s AND telegram_id IS NOT NULL
            ORDER BY rating DESC
        """, (role,))
        users = cursor.fetchall()

        if not users:
            logging.warning(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é {role}")
            return False

        for user in users:
            try:
                await bot.send_message(chat_id=user["telegram_id"], text=message)
                await asyncio.sleep(1)
                return True
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")

        return False

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—å—é {role}: {e}")
        return False


def format_order_message(order, is_repeat=False):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ."""
    if is_repeat:
        return f"""
üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order['order_id']}*
üìå *–û–ø–∏—Å–∞–Ω–∏–µ:* {order['short_description']}
üí∞ *–¶–µ–Ω–∞:* {order['price']} ‚ÇΩ
üìÖ *–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:* {order['deadline_at']}
‚è≥ *–ó–∞–∫–∞–∑ –¥–æ —Å–∏—Ö –ø–æ—Ä —Å–≤–æ–±–æ–¥–µ–Ω!*
"""
    else:
        return f"""
üöÄ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order['order_id']}*
üìå *–û–ø–∏—Å–∞–Ω–∏–µ:* {order['short_description']}
üí∞ *–¶–µ–Ω–∞:* {order['price']} ‚ÇΩ
üìÖ *–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:* {order['deadline_at']}
üëÄ *–ö—Ç–æ –ø–µ—Ä–≤—ã–π –≤–æ–∑—å–º–µ—Ç –∑–∞–∫–∞–∑?*
"""


# –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
if __name__ == "__main__":
    logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã!")
    loop = asyncio.get_event_loop()
    loop.create_task(notification_worker())
    loop.run_forever()
