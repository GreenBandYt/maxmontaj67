from functools import wraps
from telegram import Update
from telegram.ext import ContextTypes
import sys
import inspect


def check_access(required_role=None, required_state=None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏.

    :param required_role: –†–æ–ª—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏.
    :param required_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏.
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_role = context.user_data.get("role")
            user_state = context.user_data.get("state")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
            if required_role and user_role != required_role:
                await update.message.reply_text(
                    f"‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.\n"
                    f"–í–∞—à–∞ —Ä–æ–ª—å: {user_role}\n"
                    f"–¢—Ä–µ–±—É–µ–º–∞—è —Ä–æ–ª—å: {required_role}."
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if required_state and user_state != required_state:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.\n"
                    f"–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_state}\n"
                    f"–¢—Ä–µ–±—É–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {required_state}."
                )
                return

            # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            return await func(update, context, *args, **kwargs)
        return wrapper
    return decorator


def find_decorated_functions():
    """
    –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∏–º–µ—é—â–∏—Ö –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã.
    """
    decorated_functions = []

    print("üîé –ü–æ–∏—Å–∫ –∑–∞–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")

    for module_name, module in sys.modules.items():
        for name, func in inspect.getmembers(module, inspect.isfunction):
            if hasattr(func, '__wrapped__'):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {func.__name__} –≤ –º–æ–¥—É–ª–µ {module_name}")
                decorated_functions.append({
                    "function_name": func.__name__,
                    "decorator": func.__wrapped__.__name__,
                    "module": module_name,
                    "description": func.__doc__ or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                })

    print(f"üìå –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(decorated_functions)}")
    return decorated_functions
