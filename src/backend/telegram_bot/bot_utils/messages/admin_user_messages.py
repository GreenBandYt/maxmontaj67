from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from bot_utils.bot_db_utils import db_connect
from bot_utils.access_control import check_access
from telegram_bot.dictionaries.states import INITIAL_STATES
import logging
import traceback


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìû –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
async def handle_user_message_to_admin(update, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üìû –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É".
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ "awaiting_admin_message" –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ë–î.
    """
    user = {
        "id": update.message.from_user.id,
        "first_name": update.message.from_user.first_name,
        "username": update.message.from_user.username,
    }

    logging.info(f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['first_name']} (@{user['username']}) –Ω–∞—á–∞–ª –ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏ –º—ã –µ–≥–æ –ø–µ—Ä–µ–¥–∞–¥–∏–º.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
    try:
        with db_connect() as conn:
            cursor = conn.cursor()
            # –õ–æ–≥–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            logging.info(
                f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: query='UPDATE users SET state = %s WHERE telegram_id = %s', params=('awaiting_admin_message', {user['id']})")

            query = "UPDATE users SET state = %s WHERE telegram_id = %s"
            cursor.execute(query, ("awaiting_admin_message", user["id"]))
            conn.commit()
            logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î: {e}")
        logging.error(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –±–∞–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ)
    import asyncio
    await asyncio.sleep(2)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data["state"] = "awaiting_admin_message"
    context.user_data["user_info"] = user
    logging.info(f"üîÑ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: 'awaiting_admin_message'")

    # –õ–æ–≥ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_user_message_to_admin –∑–∞–≤–µ—Ä—à–µ–Ω.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# @check_access(required_role="all", required_state="awaiting_admin_message")
async def process_user_message(update, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ (–¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏)
    –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    logging.info("üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = context.user_data.get("role", "guest")
    logging.info(f"üë§ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_role}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ handle_user_message_to_admin)
    user = context.user_data.get("user_info")
    if not user:
        logging.error("‚ùå –û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'user_info' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    message_text = update.message.text
    logging.info(f"üì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['first_name']} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")

    formatted_message, reply_markup = format_user_message_to_admin(user, message_text)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    admin_ids = []
    try:
        with db_connect() as conn:
            cursor = conn.cursor()
            query = "SELECT telegram_id FROM users WHERE role = 'admin'"
            logging.info(f"üì° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {query}")
            cursor.execute(query)
            admin_ids = [row[0] for row in cursor.fetchall()]
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    if not admin_ids:
        logging.warning("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        await update.message.reply_text("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in admin_ids:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=formatted_message,
                parse_mode="Markdown",
                reply_markup=reply_markup,
            )
            logging.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å ID: {admin_id}")
        except Exception as e:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–ª—è –µ–≥–æ —Ä–æ–ª–∏.
    # –ó–¥–µ—Å—å –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é initial_state, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î.
    initial_state = INITIAL_STATES.get(user_role, "guest_idle")
    context.user_data["state"] = initial_state
    logging.info(f"üîÑ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω–æ –Ω–∞: {initial_state}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–µ–º REPLACE –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –∏–∑ telegram_id.
    try:
        with db_connect() as conn:
            cursor = conn.cursor()
            query = "UPDATE users SET state = %s WHERE REPLACE(telegram_id, ' ', '') = %s"
            cursor.execute(query, (initial_state, str(context.user_data.get("telegram_id"))))
        conn.commit()
        logging.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î —Å–±—Ä–æ—à–µ–Ω–æ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î: {e}")

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—É–¥–∞–ª—è–µ–º user_info)
    context.user_data.pop("user_info", None)
    logging.info("üßπ –û—á–∏—â–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")



# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
def format_user_message_to_admin(user, message_text):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    logging.info(f"üìú –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user['id']}")
    formatted_message = (
        f"üì© *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n"
        f"üë§ *–ò–º—è*: {user['first_name']} (Username: @{user['username']})\n"
        f"üÜî *ID*: {user['id']}\n\n"
        f"‚úâÔ∏è *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n{message_text}"
    )
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_user_{user['id']}")]
    ])
    return formatted_message, reply_markup
