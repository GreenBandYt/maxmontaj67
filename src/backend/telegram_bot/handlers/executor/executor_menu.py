# src/backend/telegram_bot/handlers/executor/executor_menu.py

from telegram import Update
from telegram.ext import ContextTypes
from .executor_keyboards import executor_keyboard
import logging
import pymysql
from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup

from telegram_bot.bot_utils.bot_db_utils import db_connect
from telegram_bot.bot_utils.messages.notifications import format_order_message  # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é

async def executor_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    """
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {update.effective_user.first_name}!\n"
        "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=executor_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    )




async def handle_executor_accept_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    order_id = int(query.data.split("_")[-1])
    telegram_id = query.from_user.id

    logging.info(f"[EXECUTOR] {telegram_id} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∑—è—Ç—å –∑–∞–∫–∞–∑ {order_id}")

    with db_connect() as conn:
        cursor = conn.cursor(pymysql.cursors.DictCursor)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        cursor.execute("SELECT status FROM orders WHERE id = %s", (order_id,))
        order = cursor.fetchone()

        if not order:
            logging.error(f"[EXECUTOR] –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!")
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —É–¥–∞–ª—ë–Ω.")
            return

        if order["status"] == "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è":
            logging.warning(f"[EXECUTOR] –ó–∞–∫–∞–∑ {order_id} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!")
            await query.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!", show_alert=True)
            await query.edit_message_text("‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return

        # –ù–∞—Ö–æ–¥–∏–º user_id –ø–æ telegram_id
        cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (telegram_id,))
        user = cursor.fetchone()

        if not user:
            logging.error(f"[EXECUTOR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!")
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
            return

        user_id = user["id"]
        logging.info(f"[EXECUTOR] –ù–∞–π–¥–µ–Ω user_id {user_id} –¥–ª—è telegram_id {telegram_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        sql = "UPDATE orders SET installer_id = %s, status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' WHERE id = %s"
        logging.info(f"SQL QUERY: {sql} | DATA: ({user_id}, {order_id})")
        cursor.execute(sql, (user_id, order_id))
        conn.commit()
        logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ë–î")

        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ pending_orders
        cursor.execute("DELETE FROM pending_orders WHERE order_id = %s", (order_id,))
        conn.commit()
        logging.info(f"üóëÔ∏è –ó–∞–∫–∞–∑ {order_id} —É–¥–∞–ª—ë–Ω –∏–∑ pending_orders")

    await query.edit_message_text("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await query.edit_message_reply_markup(None)


async def handle_executor_decline_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üîô –ù–µ –±–µ—Ä—É" (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å).
    """
    query = update.callback_query
    order_id = query.data.split("_")[-1]  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞

    logging.info(f"[EXECUTOR] {query.from_user.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞ {order_id}")

    await query.answer("üö´ –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞.", show_alert=True)
    await query.edit_message_reply_markup(None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏


async def handle_executor_new_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏).
    """
    telegram_id = update.message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logging.info(f"[EXECUTOR] {telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")

    with db_connect() as conn:
        cursor = conn.cursor(pymysql.cursors.DictCursor)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∏–∑ pending_orders
        cursor.execute("""
            SELECT * FROM pending_orders
            WHERE (status='new' OR status='notified')
        """)
        new_orders = cursor.fetchall()

        if not new_orders:
            await update.message.reply_text("üîî –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for order in new_orders:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
            message_text, reply_markup = format_order_message(order, is_repeat=False, role="4")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            if reply_markup:
                await update.message.reply_text(message_text, parse_mode="Markdown", reply_markup=reply_markup)
            else:
                await update.message.reply_text(message_text, parse_mode="Markdown")

async def handle_executor_current_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    """
    telegram_id = update.message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logging.info(f"[EXECUTOR] {telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π.")

    with db_connect() as conn:
        cursor = conn.cursor(pymysql.cursors.DictCursor)

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π
        cursor.execute("""
            SELECT 
                o.id AS order_id, 
                o.customer_address, 
                c.phone AS customer_phone, 
                o.description, 
                o.montage_date, 
                o.deadline_at 
            FROM 
                orders o
            JOIN 
                customers c ON o.customer_id = c.id
            WHERE 
                o.installer_id = (SELECT id FROM users WHERE telegram_id = %s) AND 
                o.status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
        """, (telegram_id,))
        current_orders = cursor.fetchall()

        if not current_orders:
            await update.message.reply_text("üõ†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        for order in current_orders:
            message = f"""
üìã *–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{order['order_id']}*
üè† *–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞:* {order['customer_address']}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:* {order['customer_phone']}
üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {order['description']}
üìÖ *–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {order['montage_date'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}
‚è∞ *–î–µ–¥–ª–∞–π–Ω:* {order['deadline_at']}
"""
            reply_markup = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data=f"executor_set_montage_date_{order['order_id']}"),
                    InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–∞", callback_data=f"executor_complete_order_{order['order_id']}")
                ]
            ])
            await update.message.reply_text(message, parse_mode="Markdown", reply_markup=reply_markup)







async def handle_executor_montage_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (executor).
    """
    await update.message.reply_text("üìÖ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def handle_executor_complete_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (executor).
    """
    await update.message.reply_text("‚úÖ –ú–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")



async def handle_executor_contact_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä—è–º–æ –∑–¥–µ—Å—å.")