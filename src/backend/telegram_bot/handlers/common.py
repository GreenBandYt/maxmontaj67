# src/backend/telegram_bot/handlers/common.py

import bcrypt
import logging
from telegram import Update
import pymysql
from telegram.ext import ContextTypes
from telegram_bot.bot_utils.bot_db_utils import db_connect
from telegram_bot.handlers.admin.admin_menu import admin_start
from telegram_bot.handlers.dispatcher.dispatcher_menu import dispatcher_start
from telegram_bot.handlers.executor.executor_menu import executor_start
from telegram_bot.handlers.specialist.specialist_menu import specialist_start
from telegram_bot.handlers.customer.customer_menu import customer_start
from telegram_bot.handlers.blocked.blocked_menu import blocked_start
from telegram_bot.handlers.guest.guest_menu import start_guest
from telegram_bot.dictionaries.text_actions import TEXT_ACTIONS
from telegram_bot.dictionaries.callback_actions import CALLBACK_ACTIONS
from telegram_bot.dictionaries.smart_replies import get_smart_reply
from telegram_bot.dictionaries.states import INITIAL_STATES, STATE_HANDLERS

from telegram_bot.bot_utils.access_control import check_access, check_state
from telegram_bot.bot_utils.db_utils import update_user_state, get_user_state
from telegram_bot.bot_utils.admin_messaging import (
    send_message_to_admins,process_admin_message,  handle_reply_button,
    handle_reply_button, handle_reply_message,
)


from handlers.executor.executor_menu import (
    handle_executor_accept_order,
    handle_executor_decline_order,
    handle_executor_set_montage_date,
    handle_executor_date_input,
    handle_executor_date_confirm,
    handle_executor_cancel_date_input,
    handle_executor_return_to_menu,
    handle_executor_complete_order,
)

from handlers.specialist.specialist_menu import (
    handle_specialist_accept_order,
    handle_specialist_decline_order,
    handle_specialist_set_montage_date,
    handle_specialist_date_input,
    handle_specialist_date_confirm,
    handle_specialist_cancel_date_input,
    handle_specialist_return_to_menu,
    handle_specialist_complete_order,
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='[%(levelname)s] %(message)s')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ä–æ–ª–∏
    –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    user_id = update.effective_user.id  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = update.effective_user.first_name

    try:
        conn = db_connect()
        with conn.cursor(pymysql.cursors.DictCursor) as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query = """
                SELECT r.name AS role, u.user_state
                FROM users u
                JOIN roles r ON u.role = r.id
                WHERE u.telegram_id = %s
            """
            cursor.execute(query, (user_id,))
            user_data = cursor.fetchone()

            if not user_data:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≥–æ—Å—Ç—è
                role = "new_guest"
                initial_state = "guest_idle"
                cursor.execute("""
                    INSERT INTO users (telegram_id, name, role, user_state)
                    VALUES (%s, %s, (SELECT id FROM roles WHERE name = 'guest'), %s)
                """, (user_id, user_name, initial_state))
                conn.commit()
            else:
                role = user_data["role"]
                initial_state = INITIAL_STATES.get(role, "guest_idle")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cursor.execute("""
                    UPDATE users
                    SET user_state = %s
                    WHERE telegram_id = %s
                """, (initial_state, user_id))
                conn.commit()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–æ–ª—å
        if role == "new_guest":
            await start_guest(update, context)
        elif role == "guest":
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n"
                "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –≤–∞—à–∞ —Ä–æ–ª—å –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        elif role == "admin":
            await admin_start(update, context)
        elif role == "dispatcher":
            await dispatcher_start(update, context)
        elif role == "executor":
            await executor_start(update, context)
        elif role == "specialist":
            await specialist_start(update, context)
        elif role == "customer":
            await customer_start(update, context)
        elif role == "blocked":
            await blocked_start(update, context)
        else:
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n"
                f"–í–∞—à–∞ —Ä–æ–ª—å: {role}.\n"
                "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    finally:
        if conn:
            conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def check_user_name_in_db(user_name: str) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∞—á–µ None.
    """
    try:
        conn = db_connect()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with conn.cursor() as cursor:
            query = """
                SELECT u.id, u.role, r.name AS role_name
                FROM users u
                JOIN roles r ON u.role = r.id
                WHERE u.name = %s
            """
            cursor.execute(query, (user_name,))
            result = cursor.fetchone()
            if result:
                print(f"[INFO] –ò–º—è '{user_name}' –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return {
                    "id": result['id'],
                    "role": result['role_name']
                }
            else:
                print(f"[INFO] –ò–º—è '{user_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return None
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–º–µ–Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None
    finally:
        conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ telegram_id –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def bind_telegram_id_to_user(telegram_id: int, user_id: int):
    """
    –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç telegram_id –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        conn = db_connect()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with conn.cursor() as cursor:
            query = "UPDATE users SET telegram_id = %s WHERE id = %s"
            cursor.execute(query, (telegram_id, user_id))
        conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ telegram_id –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    finally:
        conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
def find_user_by_email(email: str):
    """
    –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    conn = db_connect()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        with conn.cursor() as cursor:
            query = """
                SELECT u.id, u.name, r.name AS role
                FROM users u
                JOIN roles r ON u.role = r.id
                WHERE u.email = %s
            """
            cursor.execute(query, (email,))
            result = cursor.fetchone()
            if result:
                print(f"[INFO] Email '{email}' –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return result
            else:
                print(f"[INFO] Email '{email}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return None
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None
    finally:
        conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è telegram_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_user_telegram_id(user_id: int, telegram_id: int):
    """
    –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç telegram_id –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    conn = db_connect()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        with conn.cursor() as cursor:
            query = """
                UPDATE users
                SET telegram_id = %s
                WHERE id = %s
            """
            cursor.execute(query, (telegram_id, user_id))
            conn.commit()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    finally:
        conn.close()


async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("üõ†Ô∏è –í—ã–∑–≤–∞–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_user_input")
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = update.effective_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ update
    user_state = await get_user_state(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if user_state in STATE_HANDLERS:
        handler_name = STATE_HANDLERS[user_state]
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
            handler = globals().get(handler_name)
            if callable(handler):
                logging.info(f"üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_state}. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ {handler_name}.")
                await handler(update, context)
                return
            else:
                raise ValueError(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ {handler_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤—ã–∑—ã–≤–∞–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ {handler_name} –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {user_state}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥—Ä—É–≥–∏—Ö —É—Å–ª–æ–≤–∏–π
    logging.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_state}. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —É—Å–ª–æ–≤–∏—è.")


    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–æ–π
    action = TEXT_ACTIONS.get(user_text)
    if action:
        logging.info(f"üîò –ù–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ '{user_text}': {action.__name__}.")
        await action(update, context)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º "—É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"
    response = get_smart_reply(user_text)
    if response:
        logging.info(f"ü§ñ –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ '{user_text}': {response}.")
        await update.message.reply_text(response)
        return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    logging.info(f"‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç: '{user_text}'.")
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é. ü§î"
    )

async def handle_inline_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫.
    """
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏


    callback_data = query.data  # –ü–æ–ª—É—á–∞–µ–º callback_data –∫–Ω–æ–ø–∫–∏
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ callback_data: {callback_data}")

    # –ò—â–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É callback_data (–±–µ–∑ ID –∑–∞–∫–∞–∑–∞)
    action = next((v for k, v in CALLBACK_ACTIONS.items() if callback_data.startswith(k)), None)

    if action:
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            await globals()[action](update, context)
        except KeyError:
            logging.error(f"–§—É–Ω–∫—Ü–∏—è –¥–ª—è callback_data '{callback_data}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    else:
        # –ï—Å–ª–∏ callback_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
        logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ callback_data: {callback_data}")
        await query.edit_message_text(
            "–ö–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
